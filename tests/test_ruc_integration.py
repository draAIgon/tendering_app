"""
Test para verificar si la validaci√≥n RUC est√° funcionando en el an√°lisis completo
"""

import sys
import os
from pathlib import Path
import logging

# Configurar path
backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if backend_dir not in sys.path:
    sys.path.insert(0, backend_dir)

root_dir = os.path.dirname(backend_dir)
if root_dir not in sys.path:
    sys.path.insert(0, root_dir)

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_ruc_in_full_analysis():
    """Test para verificar que RUC se incluye en an√°lisis completo"""
    
    logger.info("üß™ Testing RUC validation in comprehensive analysis...")
    
    try:
        from backend.utils.bidding import BiddingAnalysisSystem
        
        # Crear sistema
        system = BiddingAnalysisSystem()
        logger.info("‚úÖ BiddingAnalysisSystem creado")
        
        # Crear un archivo temporal con contenido que incluya RUC
        test_content = """
        PROPUESTA T√âCNICA
        CONSTRUCTORA ANDES S.A.
        RUC: 1790123456001
        
        Estimado Comit√© de Licitaciones,
        
        Por medio de la presente, presentamos nuestra propuesta para la ejecuci√≥n
        del proyecto de construcci√≥n solicitado.
        
        DATOS DE LA EMPRESA:
        Raz√≥n Social: CONSTRUCTORA ANDES S.A.
        RUC: 1790123456001
        Direcci√≥n: Av. Amazonas 1234, Quito
        
        REPRESENTANTE LEGAL:
        Nombre: Ing. Juan P√©rez
        C√©dula: 1712345678
        RUC Personal: 1712345678001
        
        EXPERIENCIA:
        - Construcci√≥n de edificios residenciales (10 a√±os)
        - Obras de infraestructura vial (5 a√±os)
        
        PROPUESTA ECON√ìMICA:
        Valor total: $150,000.00
        Plazo de ejecuci√≥n: 6 meses
        
        Atentamente,
        CONSTRUCTORA ANDES S.A.
        """
        
        # Crear archivo temporal
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(test_content)
            temp_file = f.name
        
        logger.info(f"üìÑ Archivo temporal creado: {temp_file}")
        
        # Ejecutar an√°lisis comprehensive
        logger.info("üîç Ejecutando an√°lisis comprehensive...")
        result = system.analyze_document(
            document_path=temp_file,
            document_type="proposal",
            analysis_level="comprehensive"  # ¬°IMPORTANTE: comprehensive para activar RUC!
        )
        
        # Verificar que el an√°lisis se complet√≥
        logger.info(f"üìä Estado del an√°lisis: {result.get('overall_status', 'unknown')}")
        logger.info(f"üèóÔ∏è Etapas completadas: {len(result.get('stages', {}))}")
        
        # Verificar etapas espec√≠ficas
        stages = result.get('stages', {})
        for stage_name in ['extraction', 'classification', 'validation', 'ruc_validation', 'risk_analysis']:
            if stage_name in stages:
                status = stages[stage_name].get('status', 'unknown')
                logger.info(f"   ‚úÖ {stage_name}: {status}")
            else:
                logger.info(f"   ‚ùå {stage_name}: no encontrado")
        
        # Verificar espec√≠ficamente RUC validation
        if 'ruc_validation' in stages:
            ruc_stage = stages['ruc_validation']
            if ruc_stage.get('status') == 'completed':
                ruc_data = ruc_stage.get('data', {})
                ruc_summary = ruc_data.get('validation_summary', {})
                
                logger.info("üéØ VALIDACI√ìN RUC ENCONTRADA:")
                logger.info(f"   üìä Total RUCs: {ruc_summary.get('total_rucs', 0)}")
                logger.info(f"   ‚úÖ Formato v√°lido: {ruc_summary.get('valid_format', 0)}")
                logger.info(f"   üåê Verificados online: {ruc_summary.get('verified_online', 0)}")
                logger.info(f"   üîó Compatibles: {ruc_summary.get('compatible_entities', 0)}")
                logger.info(f"   üìà Score general: {ruc_data.get('overall_score', 0)}%")
                logger.info(f"   üéØ Nivel: {ruc_data.get('validation_level', 'UNKNOWN')}")
                
                # Verificar si est√° en el resumen
                summary = result.get('summary', {})
                key_findings = summary.get('key_findings', [])
                
                ruc_findings = [finding for finding in key_findings if 'RUC' in finding]
                if ruc_findings:
                    logger.info("üîç RUC INCLUIDO EN RESUMEN:")
                    for finding in ruc_findings:
                        logger.info(f"   - {finding}")
                else:
                    logger.warning("‚ö†Ô∏è RUC no aparece en key_findings del resumen")
                
                return True
                
            else:
                logger.error(f"‚ùå RUC validation fall√≥: {ruc_stage.get('error', 'Error desconocido')}")
                return False
        else:
            logger.error("‚ùå RUC validation no se ejecut√≥")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # Limpiar archivo temporal
        try:
            os.unlink(temp_file)
            logger.info("üßπ Archivo temporal eliminado")
        except:
            pass


def main():
    """Ejecutar test"""
    logger.info("üöÄ Iniciando verificaci√≥n de RUC en an√°lisis completo...")
    
    success = test_ruc_in_full_analysis()
    
    if success:
        logger.info("‚úÖ ¬°RUC VALIDATION EST√Å FUNCIONANDO CORRECTAMENTE!")
        logger.info("üìã La validaci√≥n RUC se ejecuta en an√°lisis comprehensive")
        logger.info("üîó Los resultados se incluyen en el resumen final")
    else:
        logger.error("‚ùå RUC validation no est√° funcionando como esperado")
    
    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
