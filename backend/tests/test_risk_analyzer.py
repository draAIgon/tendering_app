#!/usr/bin/env python3
"""
Test script for RiskAnalyzerAgent
Tests risk identification, analysis, and scoring capabilities
"""

import sys
import tempfile
from pathlib import Path

# Agregar paths necesarios
current_dir = Path(__file__).parent
backend_dir = current_dir.parent  # Go up one level to backend directory
sys.path.append(str(backend_dir))
sys.path.append(str(backend_dir / "utils" / "agents"))

from utils.agents.risk_analyzer import RiskAnalyzerAgent
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_basic_risk_analysis():
    """Test b√°sico de an√°lisis de riesgos"""
    logger.info("=== Test B√°sico de An√°lisis de Riesgos ===")
    
    # Buscar el documento de prueba en m√∫ltiples ubicaciones
    backend_dir = current_dir.parent  # Go up to backend
    doc_paths = [
        backend_dir / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir / ".." / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir.parent / "EJEMPLO DE CONTRATO - RETO 1.pdf"
    ]
    
    document_path = None
    for path in doc_paths:
        if path.exists():
            logger.info(f"Documento encontrado en: {path}")
            document_path = str(path)
            break
    
    if not document_path:
        logger.warning(f"Documento no encontrado: {doc_paths[0]}")
        return False
    
    try:
        # Crear agente de an√°lisis de riesgos con ruta correcta
        db_path = backend_dir / "db" / "test_risk_analyzer"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        if agent.initialize_embeddings():
            logger.info("‚úÖ Sistema de embeddings inicializado")
        
        # Realizar an√°lisis de riesgos del documento
        risk_analysis = agent.analyze_document_risks(document_path=document_path)
        
        if "error" in risk_analysis:
            logger.error(f"Error en an√°lisis: {risk_analysis['error']}")
            return False
        
        # Mostrar resultados
        logger.info("‚úÖ An√°lisis de riesgos completado exitosamente")
        
        overall_score = risk_analysis.get('overall_assessment', {}).get('total_risk_score', 0)
        logger.info(f"üìä Score total de riesgo: {overall_score:.2f}%")
        
        # Mostrar categor√≠as de riesgo encontradas
        category_risks = risk_analysis.get('category_risks', {})
        logger.info(f"\nüö® Categor√≠as de riesgo analizadas ({len(category_risks)}):")
        for category, data in category_risks.items():
            if 'error' not in data:
                score = data.get('risk_score', 0)
                indicators = data.get('indicators_detected', 0)
                level = data.get('risk_level', 'UNKNOWN')
                logger.info(f"  ‚Ä¢ {category.replace('_', ' ')}: {score:.1f}% ({level}) - {indicators} indicadores")
        
        # Mostrar riesgos cr√≠ticos si los hay
        critical_risks = risk_analysis.get('critical_risks', [])
        if critical_risks:
            logger.info(f"\n‚ö†Ô∏è  Riesgos cr√≠ticos encontrados ({len(critical_risks)}):")
            for risk in critical_risks[:3]:  # Mostrar solo los primeros 3
                logger.info(f"    - {risk.get('category', 'N/A')}: Score {risk.get('score', 0):.1f}%")
        
        # Verificar estructura b√°sica
        required_keys = ['category_risks', 'overall_assessment', 'mitigation_recommendations']
        for key in required_keys:
            if key not in risk_analysis:
                logger.error(f"‚ùå Clave requerida faltante: {key}")
                return False
        
        logger.info("‚úÖ Estructura del an√°lisis de riesgos v√°lida")
        return True
        
    except Exception as e:
        logger.error(f"Error durante el an√°lisis de riesgos: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_risk_categorization():
    """Test de categorizaci√≥n de riesgos"""
    logger.info("\n=== Test de Categorizaci√≥n de Riesgos ===")
    
    backend_dir = Path(__file__).parent.parent  # Go up to backend
    doc_paths = [
        backend_dir / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir / ".." / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir.parent / "EJEMPLO DE CONTRATO - RETO 1.pdf"
    ]
    
    document_path = None
    for path in doc_paths:
        if path.exists():
            document_path = str(path)
            break
    
    if not document_path:
        logger.warning("No se encontr√≥ documento para test de categorizaci√≥n")
        return False
    
    try:
        # Crear agente de an√°lisis de riesgos
        db_path = backend_dir / "db" / "test_risk_analyzer"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        agent.initialize_embeddings()
        
        # Realizar an√°lisis de riesgos
        risk_analysis = agent.analyze_document_risks(document_path=document_path)
        
        if "error" in risk_analysis:
            logger.error(f"Error en an√°lisis: {risk_analysis['error']}")
            return False
        
        # Verificar categor√≠as espec√≠ficas
        category_risks = risk_analysis.get('category_risks', {})
        expected_categories = ['TECHNICAL_RISKS', 'ECONOMIC_RISKS', 'LEGAL_RISKS', 'OPERATIONAL_RISKS', 'SUPPLIER_RISKS']
        
        found_categories = 0
        for category in expected_categories:
            if category in category_risks and 'error' not in category_risks[category]:
                found_categories += 1
                data = category_risks[category]
                logger.info(f"‚úÖ {category.replace('_', ' ')}: Score {data.get('risk_score', 0):.1f}% - {data.get('indicators_detected', 0)} indicadores")
        
        logger.info(f"üìä Categor√≠as analizadas exitosamente: {found_categories}/{len(expected_categories)}")
        
        # Verificar que al menos algunas categor√≠as fueron analizadas
        if found_categories >= 3:
            logger.info("‚úÖ Categorizaci√≥n de riesgos exitosa")
            return True
        else:
            logger.warning("‚ö†Ô∏è  Pocas categor√≠as analizadas exitosamente")
            return False
        
    except Exception as e:
        logger.error(f"Error en categorizaci√≥n de riesgos: {e}")
        return False

def test_risk_scoring():
    """Test de puntuaci√≥n de riesgos"""
    logger.info("\n=== Test de Puntuaci√≥n de Riesgos ===")
    
    backend_dir = Path(__file__).parent.parent  # Go up to backend
    doc_paths = [
        backend_dir / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir / ".." / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir.parent / "EJEMPLO DE CONTRATO - RETO 1.pdf"
    ]
    
    document_path = None
    for path in doc_paths:
        if path.exists():
            document_path = str(path)
            break
    
    if not document_path:
        logger.warning("No se encontr√≥ documento para test de puntuaci√≥n")
        return False
    
    try:
        # Crear agente de an√°lisis de riesgos
        db_path = backend_dir / "db" / "test_risk_analyzer"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        agent.initialize_embeddings()
        
        # Realizar an√°lisis de riesgos
        risk_analysis = agent.analyze_document_risks(document_path=document_path)
        
        if "error" in risk_analysis:
            logger.error(f"Error en an√°lisis: {risk_analysis['error']}")
            return False
        
        # Verificar scores de riesgo
        overall_assessment = risk_analysis.get('overall_assessment', {})
        total_risk_score = overall_assessment.get('total_risk_score', 0)
        risk_level = overall_assessment.get('risk_level', 'UNKNOWN')
        
        logger.info(f"üìä Score total de riesgo: {total_risk_score:.2f}%")
        logger.info(f"üéØ Nivel de riesgo: {risk_level}")
        
        # Verificar distribuci√≥n de riesgos
        risk_distribution = overall_assessment.get('risk_distribution', {})
        if risk_distribution:
            logger.info("üìà Distribuci√≥n de riesgos por categor√≠a:")
            for category, percentage in risk_distribution.items():
                logger.info(f"  ‚Ä¢ {category.replace('_', ' ')}: {percentage:.1f}%")
        
        # Verificar que el score est√° en rango v√°lido
        if 0 <= total_risk_score <= 100:
            logger.info("‚úÖ Score de riesgo en rango v√°lido")
            return True
        else:
            logger.error(f"‚ùå Score de riesgo fuera de rango: {total_risk_score}")
            return False
        
    except Exception as e:
        logger.error(f"Error en puntuaci√≥n de riesgos: {e}")
        return False

def test_mitigation_suggestions():
    """Test de sugerencias de mitigaci√≥n"""
    logger.info("\n=== Test de Sugerencias de Mitigaci√≥n ===")
    
    backend_dir = Path(__file__).parent.parent  # Go up to backend
    
    # Try multiple documents, including the risky one first
    doc_paths = [
        backend_dir / ".." / "documents" / "pliego_licitacion_riesgoso.pdf",
        backend_dir / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir / ".." / "documents" / "EJEMPLO DE CONTRATO - RETO 1.pdf",
        backend_dir.parent / "EJEMPLO DE CONTRATO - RETO 1.pdf"
    ]
    
    document_path = None
    for path in doc_paths:
        if path.exists():
            logger.info(f"Usando documento: {path.name}")
            document_path = str(path)
            break
    
    if not document_path:
        logger.warning("No se encontr√≥ documento para test de mitigaci√≥n")
        return False
    
    try:
        # Crear agente de an√°lisis de riesgos
        db_path = backend_dir / "db" / "test_risk_analyzer"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        agent.initialize_embeddings()
        
        # Realizar an√°lisis de riesgos
        risk_analysis = agent.analyze_document_risks(document_path=document_path)
        
        if "error" in risk_analysis:
            logger.error(f"Error en an√°lisis: {risk_analysis['error']}")
            return False
        
        # Verificar recomendaciones de mitigaci√≥n
        mitigation_recommendations = risk_analysis.get('mitigation_recommendations', [])
        
        logger.info(f"üí° Recomendaciones de mitigaci√≥n generadas: {len(mitigation_recommendations)}")
        
        # Get overall assessment for more info
        overall_assessment = risk_analysis.get('overall_assessment', {})
        total_risk_score = overall_assessment.get('total_risk_score', 0)
        logger.info(f"üìä Score total de riesgo: {total_risk_score:.2f}%")
        
        # If we have recommendations, show them
        if mitigation_recommendations:
            logger.info("üîß Principales recomendaciones:")
            for i, recommendation in enumerate(mitigation_recommendations[:3], 1):
                category = recommendation.get('category', 'N/A').replace('_', ' ')
                priority = recommendation.get('priority', 'MEDIUM')
                text = recommendation.get('recommendation', 'N/A')[:80] + "..."
                logger.info(f"  {i}. [{priority}] {category}: {text}")
            
            logger.info("‚úÖ Sugerencias de mitigaci√≥n generadas exitosamente")
            return True
        else:
            # If no recommendations but low risk, that's actually expected behavior
            if total_risk_score < 20:  # Very low risk - no recommendations expected
                logger.info("‚ÑπÔ∏è  No se generaron recomendaciones (riesgo muy bajo - comportamiento esperado)")
                return True
            else:
                logger.warning("‚ö†Ô∏è  No se generaron recomendaciones para riesgo medio/alto")
                return False
        
    except Exception as e:
        logger.error(f"Error en sugerencias de mitigaci√≥n: {e}")
        return False

def test_synthetic_high_risk_document():
    """Test con documento sint√©tico de alto riesgo para validar mitigaci√≥n"""
    logger.info("\n=== Test con Documento Sint√©tico de Alto Riesgo ===")
    
    # Crear contenido sint√©tico con m√∫ltiples indicadores de riesgo
    synthetic_content = """
    PLIEGO DE CONDICIONES T√âCNICAS - PROYECTO DE ALTO RIESGO
    
    RIESGOS T√âCNICOS:
    - Tecnolog√≠a no probada en entornos de producci√≥n
    - Especificaciones t√©cnicas ambiguas en varios aspectos cr√≠ticos
    - Compatibilidad dudosa con sistemas existentes
    - Falta de est√°ndares establecidos para la implementaci√≥n
    - Dependencia tecnol√≥gica con un solo proveedor
    - Integraci√≥n compleja con m√∫ltiples sistemas legacy
    
    RIESGOS ECON√ìMICOS:
    - Precio excesivamente bajo comparado con el mercado
    - Costos ocultos no especificados en la propuesta
    - Variaci√≥n de precios sin tope m√°ximo definido
    - Manejo de moneda extranjera sin cobertura
    - Garant√≠as insuficientes para el alcance del proyecto
    - Flujo de caja negativo proyectado en primeros meses
    
    RIESGOS LEGALES:
    - Normatividad cambiante en el sector
    - Regulaci√≥n no clara para nuevas tecnolog√≠as
    - Conflicto de leyes entre jurisdicciones
    - Licencias pendientes de aprobaci√≥n regulatoria
    - Responsabilidad civil no completamente definida
    
    RIESGOS OPERACIONALES:
    - Recursos insuficientes para la magnitud del proyecto
    - Personal no calificado para tecnolog√≠as espec√≠ficas
    - Cronograma extremadamente apretado
    - M√∫ltiples dependencias externas cr√≠ticas
    - Coordinaci√≥n compleja entre equipos remotos
    - Control de calidad sin procedimientos establecidos
    
    RIESGOS DE PROVEEDOR:
    - Proveedor √∫nico sin alternativas viables
    - Experiencia limitada en proyectos similares
    - Estabilidad financiera dudosa del contratista principal
    - Referencias negativas en proyectos anteriores
    - Ubicaci√≥n remota con dificultades log√≠sticas
    """
    
    try:
        # Crear agente de an√°lisis de riesgos
        backend_dir = Path(__file__).parent.parent
        db_path = backend_dir / "db" / "test_risk_analyzer_synthetic"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        agent.initialize_embeddings()
        
        # Crear archivo temporal con contenido sint√©tico
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as tmp_file:
            tmp_file.write(synthetic_content)
            tmp_path = tmp_file.name
        
        try:
            # Analizar el contenido sint√©tico directamente
            risk_analysis = agent.analyze_document_risks(content=synthetic_content, document_type="RFP")
            
            if "error" in risk_analysis:
                logger.error(f"Error en an√°lisis sint√©tico: {risk_analysis['error']}")
                return False
            
            # Verificar que se detectaron riesgos altos
            overall_assessment = risk_analysis.get('overall_assessment', {})
            total_risk_score = overall_assessment.get('total_risk_score', 0)
            
            logger.info(f"ÔøΩ Score total de riesgo (sint√©tico): {total_risk_score:.2f}%")
            
            # Mostrar categor√≠as detectadas
            category_risks = risk_analysis.get('category_risks', {})
            high_risk_categories = 0
            
            for category, data in category_risks.items():
                if 'error' not in data:
                    score = data.get('risk_score', 0)
                    if score > 50:
                        high_risk_categories += 1
                    level = data.get('risk_level', 'UNKNOWN')
                    indicators = data.get('indicators_detected', 0)
                    logger.info(f"  ‚Ä¢ {category.replace('_', ' ')}: {score:.1f}% ({level}) - {indicators} indicadores")
            
            logger.info(f"üìà Categor√≠as de alto riesgo detectadas: {high_risk_categories}")
            
            # Verificar recomendaciones de mitigaci√≥n
            mitigation_recommendations = risk_analysis.get('mitigation_recommendations', [])
            logger.info(f"üí° Recomendaciones generadas: {len(mitigation_recommendations)}")
            
            if mitigation_recommendations:
                logger.info("üîß Recomendaciones de mitigaci√≥n:")
                for i, recommendation in enumerate(mitigation_recommendations[:3], 1):
                    category = recommendation.get('category', 'N/A').replace('_', ' ')
                    priority = recommendation.get('priority', 'MEDIUM')
                    text = recommendation.get('recommendation', 'N/A')[:100]
                    logger.info(f"  {i}. [{priority}] {category}: {text}...")
            
            # Considerar exitoso si se detect√≥ al menos alg√∫n riesgo alto
            # o si se generaron recomendaciones
            if high_risk_categories > 0 or len(mitigation_recommendations) > 0:
                logger.info("‚úÖ Test con documento sint√©tico de alto riesgo exitoso")
                return True
            else:
                logger.warning("‚ö†Ô∏è  No se detectaron riesgos altos en documento sint√©tico")
                return False
                
        finally:
            # Limpiar archivo temporal
            import os
            if os.path.exists(tmp_path):
                os.unlink(tmp_path)
        
    except Exception as e:
        logger.error(f"Error en test sint√©tico: {e}")
        import traceback
        traceback.print_exc()
def test_risk_scoring_validation():
    """Test espec√≠fico de validaci√≥n del algoritmo de scoring"""
    logger.info("\n=== Test de Validaci√≥n del Algoritmo de Scoring ===")
    
    # Contenido realista con indicadores de riesgo sutiles (omisiones, ambig√ºedades, inconsistencias)
    high_risk_content = """
    PROPUESTA T√âCNICA Y ECON√ìMICA
    SISTEMA INTEGRADO DE GESTI√ìN EMPRESARIAL
    
    1. RESUMEN EJECUTIVO
    Nuestra empresa propone implementar una soluci√≥n innovadora que revolucionar√°
    sus procesos de negocio. Utilizaremos tecnolog√≠a de vanguardia.
    
    2. ESPECIFICACIONES T√âCNICAS
    - Arquitectura basada en microservicios
    - Base de datos distribuida
    - Interfaz web responsiva
    - API REST para integraciones
    [FALTA: Detalles espec√≠ficos de versiones, compatibilidad, requisitos hardware]
    
    3. METODOLOG√çA DE IMPLEMENTACI√ìN
    Fase 1: An√°lisis (duraci√≥n aproximada)
    Fase 2: Desarrollo (tiempo estimado)  
    Fase 3: Pruebas (seg√∫n sea necesario)
    Fase 4: Despliegue (fecha por confirmar)
    [PROBLEM√ÅTICO: Cronograma impreciso, sin hitos espec√≠ficos ni fechas]
    
    4. EQUIPO DE TRABAJO
    - Jefe de Proyecto: A definir
    - Desarrolladores: Equipo externo contratado seg√∫n demanda
    - Especialista en base de datos: Por asignar
    [RIESGO: Personal no definido, dependencia de terceros]
    
    5. PRESUPUESTO
    Costo total estimado: $XXX,XXX USD (sujeto a variaciones)
    * No incluye licencias de software de terceros
    * Costos de infraestructura cloud por separado
    * Mantenimiento posterior no contemplado en este presupuesto
    [PROBLEM√ÅTICO: Precio incompleto, costos ocultos evidentes]
    
    6. INTEGRACI√ìN CON SISTEMAS EXISTENTES
    La soluci√≥n ser√° compatible con la mayor√≠a de sistemas est√°ndar.
    Se realizar√°n las adaptaciones necesarias durante la implementaci√≥n.
    [VAGO: No especifica qu√© sistemas, c√≥mo se integrar√°]
    
    7. GARANT√çAS Y SOPORTE
    Garant√≠a de funcionamiento b√°sico por per√≠odo est√°ndar.
    Soporte t√©cnico disponible en horario comercial.
    [INSUFICIENTE: T√©rminos vagos, no define responsabilidades]
    
    8. EXPERIENCIA PREVIA
    Hemos trabajado en proyectos similares en el sector.
    Referencias disponibles bajo solicitud.
    [DUDOSO: No proporciona casos espec√≠ficos ni contactos verificables]
    
    9. CUMPLIMIENTO REGULATORIO
    La soluci√≥n cumplir√° con las normativas aplicables.
    [INCOMPLETO: No especifica cu√°les normativas ni c√≥mo las cumplir√°]
    
    10. PLAN DE CONTINGENCIA
    En caso de problemas, se implementar√°n medidas correctivas apropiadas.
    [INEXISTENTE: No hay plan espec√≠fico de riesgos ni mitigaci√≥n]
    """
    
    try:
        # Crear agente
        backend_dir = Path(__file__).parent.parent
        db_path = backend_dir / "db" / "test_risk_scoring"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings
        agent.initialize_embeddings()
        
        # Analizar el contenido de muy alto riesgo
        risk_analysis = agent.analyze_document_risks(content=high_risk_content, document_type="RFP")
        
        if "error" in risk_analysis:
            logger.error(f"Error en an√°lisis: {risk_analysis['error']}")
            return False
        
        # Validar que se detectaron m√∫ltiples indicadores
        category_risks = risk_analysis.get('category_risks', {})
        overall_score = risk_analysis.get('overall_assessment', {}).get('total_risk_score', 0)
        
        logger.info(f"üìä Score general con contenido de muy alto riesgo: {overall_score:.2f}%")
        
        total_indicators = 0
        high_scoring_categories = 0
        
        for category, data in category_risks.items():
            if 'error' not in data:
                score = data.get('risk_score', 0)
                indicators = data.get('indicators_detected', 0)
                total_indicators += indicators
                
                if score > 20:  # Esperamos scores m√°s altos con contenido repetitivo
                    high_scoring_categories += 1
                
                logger.info(f"  ‚Ä¢ {category.replace('_', ' ')}: {score:.1f}% - {indicators} indicadores")
        
        logger.info(f"üìà Total de indicadores detectados: {total_indicators}")
        logger.info(f"üìà Categor√≠as con score > 20%: {high_scoring_categories}")
        
        # Validar recomendaciones
        recommendations = risk_analysis.get('mitigation_recommendations', [])
        logger.info(f"üí° Recomendaciones generadas: {len(recommendations)}")
        
        # El test es exitoso si:
        # 1. Se detectaron m√∫ltiples indicadores (esperamos al menos 15 con repeticiones)
        # 2. Se generaron recomendaciones
        # 3. Al menos algunas categor√≠as tienen scores > 20%
        
        success_conditions = [
            total_indicators >= 10,  # Al menos 10 indicadores detectados
            len(recommendations) > 0,  # Se generaron recomendaciones
            high_scoring_categories >= 2  # Al menos 2 categor√≠as con score significativo
        ]
        
        logger.info("\nüîç Validaci√≥n de condiciones:")
        logger.info(f"  ‚úì Indicadores detectados >= 10: {total_indicators >= 10} ({total_indicators})")
        logger.info(f"  ‚úì Recomendaciones generadas: {len(recommendations) > 0} ({len(recommendations)})")
        logger.info(f"  ‚úì Categor√≠as con score alto: {high_scoring_categories >= 2} ({high_scoring_categories})")
        
        if all(success_conditions):
            logger.info("‚úÖ Algoritmo de scoring funciona correctamente")
            return True
        else:
            logger.warning("‚ö†Ô∏è  El algoritmo de scoring podr√≠a necesitar ajustes")
            return False
            
    except Exception as e:
        logger.error(f"Error en validaci√≥n de scoring: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_pliego_licitacion_comparison():
    """Test de comparaci√≥n entre pliego_licitacion.pdf y pliego_licitacion_riesgoso.pdf"""
    logger.info("\n=== Test de Comparaci√≥n Pliegos de Licitaci√≥n ===")
    
    backend_dir = Path(__file__).parent.parent
    
    # Buscar ambos documentos de pliego
    pliego_normal_paths = [
        backend_dir / ".." / "documents" / "pliego_licitacion.pdf",
        backend_dir / "documents" / "pliego_licitacion.pdf",
        Path("/home/hackiathon/workspace/tendering_app/documents/pliego_licitacion.pdf")
    ]
    
    pliego_riesgoso_paths = [
        backend_dir / ".." / "documents" / "pliego_licitacion_riesgoso.pdf",
        backend_dir / "documents" / "pliego_licitacion_riesgoso.pdf",
        Path("/home/hackiathon/workspace/tendering_app/documents/pliego_licitacion_riesgoso.pdf")
    ]
    
    pliego_normal_path = None
    pliego_riesgoso_path = None
    
    # Buscar pliego normal
    for path in pliego_normal_paths:
        if path.exists():
            pliego_normal_path = str(path)
            logger.info(f"üìÑ Pliego normal encontrado: {path.name}")
            break
    
    # Buscar pliego riesgoso
    for path in pliego_riesgoso_paths:
        if path.exists():
            pliego_riesgoso_path = str(path)
            logger.info(f"‚ö†Ô∏è Pliego riesgoso encontrado: {path.name}")
            break
    
    if not pliego_normal_path or not pliego_riesgoso_path:
        logger.warning(f"No se encontraron ambos documentos:")
        logger.warning(f"  Normal: {pliego_normal_path is not None}")
        logger.warning(f"  Riesgoso: {pliego_riesgoso_path is not None}")
        return False
    
    try:
        # Crear agente de an√°lisis de riesgos
        db_path = backend_dir / "db" / "test_pliego_comparison"
        agent = RiskAnalyzerAgent(vector_db_path=db_path)
        
        # Inicializar embeddings y DSPy
        if not agent.initialize_dspy_and_embeddings():
            logger.warning("No se pudo inicializar DSPy, usando an√°lisis b√°sico")
        
        logger.info("üîç Analizando pliego normal...")
        # Analizar pliego normal
        risk_normal = agent.analyze_document_risks(
            document_path=pliego_normal_path,
            document_type="RFP",
            analysis_level="comprehensive"
        )
        
        if "error" in risk_normal:
            logger.error(f"Error analizando pliego normal: {risk_normal['error']}")
            return False
        
        logger.info("üîç Analizando pliego riesgoso...")
        # Analizar pliego riesgoso
        risk_riesgoso = agent.analyze_document_risks(
            document_path=pliego_riesgoso_path,
            document_type="RFP", 
            analysis_level="comprehensive"
        )
        
        if "error" in risk_riesgoso:
            logger.error(f"Error analizando pliego riesgoso: {risk_riesgoso['error']}")
            return False
        
        # Obtener scores de riesgo
        score_normal = risk_normal.get('overall_assessment', {}).get('total_risk_score', 0)
        score_riesgoso = risk_riesgoso.get('overall_assessment', {}).get('total_risk_score', 0)
        
        level_normal = risk_normal.get('overall_assessment', {}).get('risk_level', 'UNKNOWN')
        level_riesgoso = risk_riesgoso.get('overall_assessment', {}).get('risk_level', 'UNKNOWN')
        
        logger.info(f"\nüìä Resultados de la comparaci√≥n:")
        logger.info(f"  üìÑ Pliego normal: {score_normal:.2f}% ({level_normal})")
        logger.info(f"  ‚ö†Ô∏è Pliego riesgoso: {score_riesgoso:.2f}% ({level_riesgoso})")
        logger.info(f"  üìà Diferencia: {score_riesgoso - score_normal:.2f} puntos")
        
        # Comparar categor√≠as de riesgo
        logger.info(f"\nüîç Comparaci√≥n por categor√≠as:")
        
        categories_normal = risk_normal.get('category_risks', {})
        categories_riesgoso = risk_riesgoso.get('category_risks', {})
        
        category_differences = {}
        
        for category in ['TECHNICAL_RISKS', 'ECONOMIC_RISKS', 'LEGAL_RISKS', 'OPERATIONAL_RISKS', 'SUPPLIER_RISKS']:
            score_n = categories_normal.get(category, {}).get('risk_score', 0)
            score_r = categories_riesgoso.get(category, {}).get('risk_score', 0)
            difference = score_r - score_n
            category_differences[category] = difference
            
            category_name = category.replace('_', ' ')
            logger.info(f"  ‚Ä¢ {category_name}: Normal {score_n:.1f}% | Riesgoso {score_r:.1f}% | Diff +{difference:.1f}%")
        
        # Verificar que el documento riesgoso tiene mayor score
        if score_riesgoso > score_normal:
            difference_threshold = 5.0  # Umbral m√≠nimo de diferencia
            if score_riesgoso - score_normal >= difference_threshold:
                logger.info(f"‚úÖ Validaci√≥n exitosa: Pliego riesgoso tiene {score_riesgoso - score_normal:.1f}% m√°s riesgo")
                
                # Mostrar riesgos cr√≠ticos de cada documento
                critical_normal = len(risk_normal.get('critical_risks', []))
                critical_riesgoso = len(risk_riesgoso.get('critical_risks', []))
                
                logger.info(f"\nüö® Riesgos cr√≠ticos:")
                logger.info(f"  üìÑ Pliego normal: {critical_normal}")
                logger.info(f"  ‚ö†Ô∏è Pliego riesgoso: {critical_riesgoso}")
                
                # Mostrar recomendaciones principales
                recommendations_riesgoso = risk_riesgoso.get('mitigation_recommendations', [])
                if recommendations_riesgoso:
                    logger.info(f"\nüí° Principales recomendaciones para pliego riesgoso:")
                    for i, rec in enumerate(recommendations_riesgoso[:3], 1):
                        priority = rec.get('priority', 'MEDIUM')
                        category = rec.get('category', '').replace('_', ' ')
                        recommendation = rec.get('recommendation', '')[:60] + "..."
                        dspy_enhanced = "ü§ñ" if rec.get('dspy_enhanced', False) else "üìù"
                        logger.info(f"    {i}. [{priority}] {dspy_enhanced} {category}: {recommendation}")
                
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Diferencia insuficiente: solo {score_riesgoso - score_normal:.1f}% (m√≠nimo {difference_threshold}%)")
                return False
        else:
            logger.error(f"‚ùå Error: Pliego riesgoso ({score_riesgoso:.1f}%) tiene menor o igual riesgo que normal ({score_normal:.1f}%)")
            return False
        
    except Exception as e:
        logger.error(f"Error en comparaci√≥n de pliegos: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal del test"""
    logger.info("üöÄ Iniciando tests del RiskAnalyzerAgent")
    
    tests = [
        ("An√°lisis B√°sico de Riesgos", test_basic_risk_analysis),
        ("Categorizaci√≥n de Riesgos", test_risk_categorization),
        ("Puntuaci√≥n de Riesgos", test_risk_scoring),
        ("Comparaci√≥n Pliegos de Licitaci√≥n", test_pliego_licitacion_comparison),
        ("Documento Sint√©tico Alto Riesgo", test_synthetic_high_risk_document),
        ("Validaci√≥n Algoritmo Scoring", test_risk_scoring_validation),
        ("Sugerencias de Mitigaci√≥n", test_mitigation_suggestions)
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ Ejecutando: {test_name}")
        logger.info('='*50)
        
        try:
            success = test_func()
            results.append((test_name, success))
            
            if success:
                logger.info(f"‚úÖ {test_name} completado exitosamente")
            else:
                logger.error(f"‚ùå {test_name} fall√≥")
                
        except Exception as e:
            logger.error(f"üí• Error cr√≠tico en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen final
    logger.info(f"\n{'='*50}")
    logger.info("üìä RESUMEN DE TESTS")
    logger.info('='*50)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logger.info(f"  {status} {test_name}")
    
    logger.info(f"\nüèÜ Resultado final: {passed}/{total} tests exitosos")
    
    if passed == total:
        logger.info("üéâ ¬°Todos los tests pasaron!")
    else:
        logger.warning(f"‚ö†Ô∏è  {total - passed} tests fallaron")

if __name__ == "__main__":
    main()
